flask的安装
1，在ubuntu 上可以用 sudo apt-get install flask 这条命令进行简单的安装（全局安装）
2，也可以在pypi.org上下载源码包进行编译安装，利用tar -zxvf 命令进行解压， cd进去解压好的目录执行sudo python setup.py install 命令进行安装
，注意我安装时用到了超级用户的权限，
3，当然也可以使用 pip 这个工具进行安装，安装前检查pip的版本，和升级它（这虽然不是必须的，但是版本太老也不行，原因是我遇到过pip的版本太老，
在安装python的一些扩展时报了不应该的错误）

虚拟环境的安装（virtualenv）
1，因为我的机子ubuntu，所以我用的命令是sudo apt-get install virtualenv 来进行安装，你也可以下载相应的源码包，解压进行编译安装，
 当然还可以用pip进行安装

2，为什么要安装和创建虚拟环境，这样做是为了解决，python包依赖之间的冲突；创虚拟环境的命令virtualenv 虚拟环境名
3，激活虚拟环境 . 虚拟环境的目录/bin/activate

一个简单的应用程序
from flask import Flask
app = Flask(__name__)

@app.route('/')
def index():
    return "hello world"
    
if __name__ == '__main__':
    app.run(debug=True)
    
flask 生命周期
        user----->http://www.example.com/index
                    |
                    V
                  路由
                    |产生
                    V
                  request对象
              form  cookie  args
                    |
                    V
                  视图函数
              redirect  render_template ->产生response对象————>把页面返回给用户
              make_response------->直接产生response对象
              
flask路由转换器

int 类型
float类型
path 类型
例子如下：
@app.route('/'):
def index():
    return "string"
@app.route('/user/<int:username>')
def user(username):
    return username
    
@app.route('/about/<ifloat:help>')
def about(help):
    return help
    
flask 自定义路由转换规则，自定义的路由转换器它依赖于werkzeug这个工具的routing这个扩展，来扩展指定路由规则
例子如下是一个自定义的正则表达式的路由转换器
from werkzeug.routing import BaseConverter

class RegexConveter(BaseConverter):
    def __init__(self, url_map, items):
        super(RegexConverter, self).__init__(url_map)
        self.regex = items[0]
        
app.url_map.converters['regex'] = RegexConverter

@app.route('user/<regex("[a-z]{3}"):user_id>')
def user(user_id):
    return 'user %s'% user_id

flask之SQLAlchemy
1，数据库的连接：
  MYSQL：Mysql://username:password@hostname/database_name
  postgres: postgres://username:password@hostname/database_name
  sqllite:  sqlite:///absolute_path/database_name
  
2,数据库的配置，以sqlite数据库为例
from flask_sqlalchemy import SQLAlchemy
import os
basedir = os.path.abspath(os.path.dirname(__file__))
#app.config.from_pyfile('config')
app.config['SQLALCHEMY_DATABASE_URI'] = \
    'sqlite:///' + os.path.join(basedir, 'data.sqlite')
app.config['SQLALCHEMY_COMMIT_TEAROW'] = True
db = SQLAchemy(app)

sqlite的数据库URL必须保存到flask配置对象的SQLALCHEMY_DATABASE_URI键中
配置对象中还有一个很有用的选项，即SQLALCHEMY_COMMIT_ON_TEAROWN键，将其设为Ture，这样每次提交结束后都会自动提交数据库的变动

创建数据库表
class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=true)
    name = db.Column(db.String, nullable=True)
    users = db.relationship('User', backref='role')
    
#relationship 的第一个参数是一个类名， 第二个参数backref反向应用，指向的是当前的这张表
    
class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullbale=True)
    password = db.Column(db.String, nullable=True)
    role_id = db.Column(db.Integer, db.Foreignkey('roles.id'))

#foreignkey指向主表id使其建立起关系
    
sqlalchemy常用的orm操作
1，可以通过sqlalchemy的实例对象点（.）来创建数据库表和数据库，如下：
from yourapplication import db
from yourapplication.models import *
db.create_all()
a，插入数据：
  1），创建python对象
  2），把它添加到会话里
  3），提交会话
  from yourappliaction import User
  me = User('admin')
  me.session.add(me)
  me.session.commit()
  
b，删除数据
db.session.delete(me)
db.session.commit()

c，查询记录
flask-sqlalchemy在Model类提供了query属性
all(),first(),filter()分别用于查询全部，第一条，和条件查询
若想要用主键查询，可以用get()
下面是查询例子：
     通过用户名查询用户：peter = User.query.filter_by(username = 'peter').first()
                         peter.id    
                         peter.email
     按照某种规则排序：User.query.order_by(User.username)
     使用主键查询用户：User.query.get(1)
     限制用户的数量：User.query.limit(1).all()
     

flask 之jinja模板引擎(模板语法)
1，变量
在模板文件中定义变量，以一对双花括号的方式加变量名
{{variable_name}}

2，赋值语句{% set link=[{'label':'Home', 'href':url_for('.index')}] %}
在jinja中url_for()里要引用视图函数要用点（.）

{% set links=[
    {'label':'Home', 'href':url_for('.index')},
    {'label':'About', 'href':url_for('.about')},
    {'label':'Service', 'href':url_for('.service')},
    {'label':'Project', 'href':url_for('.project')},
] %}

3,with语句控制变量的作用域
{% with %}{% endwith %}

4,for语句
{% for %}{% endfor %}

5,if语句
{% if %}{% endif %}

6,模板继承
通过{% block block_name %}{% endblock %}来标记要让子板继承的内容（也就是占位置）
例如通过{% extnds base.html %}让子板继承，子板可通过{% block block_name %}{% endblock %}来修改

*notes：
      {% for items in seq %}
        <li>{% block loop_item %}{{items}}{endblock}</li>
      {% endfor %}
      上述代码中变items被包含在block块中，使得外界无法访问，但是我们可以在块中使用scoped关键字来访问
      {% for items in seq %}
        <li>{% block loop_item scoped %}{{items}}{% endblock %}</li>
      {% endfor %}
      
7,宏的定义和使用
在html模板中定义和使用宏也可以把宏定义在单独的文件中
jinja中的宏就像是python中的函数
下面就是一个简单的例子：
{% macro input(name, value='', type='text', size=20) %}
    <input type="{{type}}" name="{{name}}" value="{{value}}" size="{{size}}" />
{% endmacro %}

下面是宏的调用
{{input("username")}}
{{input("password", type='password')}}

如果宏是定在其他的文件夹中，你就需要导入它
{% import 'form.hmtl' as forms %}
调用时只需这样{{forms.input('username')}}

8，编写命令行脚本
#__init__.py
from flask import Flask

def create_app():
    app = Flask(__name__)
    
    db.init_app(app)
        ....
        ....
    return app

flask 提供了flask-script这个扩展来供用户调用外部脚本的功能
#manage.py

from flask.ext.script import Manager, Server
from yourapp import create_app

app = create_app()
manager = Manager(app)
manager.add_command("server", Server())

@manager.shell
def make_shell_context():
    return dict(app = app)
    
if __name__ == '__main__':
    manager.run()

9，数据库的迁移
flask 提供 flask-Migrate扩展来编写数据库迁移脚本，一般这个扩展会和flask-script一起使用
#manage.py
from yourapp import db
from yourapp import create_app
from flask-migrate import Migrate, MigrateCommand
from flask-script import Manager

app = create_app()
manager = Manager(app)
migrate = Migrate(app)
manager.add_command('db', MigrateCommand)

if __name__ == '__main__':
    manager.run(debug=True)
    
10，flask的子集蓝图(blueprint)
作用是把项目代码分散成几个单独的子模块，方便项目代码的管理和维护
在你的项目主目录下创建一个或多个文件夹， 在新建一个名为__init__.py的文件，声明这个文件意在与要告诉python的解释器，这是一个包
下面是蓝图的定义
#__init__.py
from flask import Blueprint

auth_blueprint = Blueptint('auth', __name__)
import your view_function or forms_models

#最后在主程序中注册蓝图
app.register_blueprint(auth_blueprint)


11，表单的创建
flask-wtf，wtform扩展
#forms.py
from flask.ext.wtf import Form
from wtform.validator import DataRequest
from wtform import StringField, PasswordField， SubmitField

class LoginForm(Form):
    username = StringField(u'用户名', max(255), [DataRequest()])
    Password = PasswordField(u'密码', max(255), [Datareuest()])
    submit = SubmitField(u'提交')

后台处理表单的视图函数
#views.py
@app.route('/user/<name>', method=['GET', 'POST'])
def loginForm(name):
    form = LoginForm()
    return render_template('login.html', form=form)
    
哈嘻的处理表单视图函数
#views.py
@app.route('/user/<name>', method=['GET', 'POST'])
def loginForm(name):
    if request.method = 'POST':
        request.get = form['username']


前台输出表单
#example.html
<form method="post">
     {{form.username.label}}
     {{form.username()}}
     {{form.password.label}}
     {{form.password()}}
     {{form.submit()}}
</form>

12，flask-Admin扩展
flask提供了Admin这个扩展来编写我们的后台管理界面
flask-admin制定了三种视图类来扩展编写后台界面：
BaseView, ModelView, AdminView这三种视图类来处理不同的路由

13,flask-bcryp
flask提供了flask-Bcrypt

def set_password(self, passowrd):
    self.passwrd = set_genarnal_hash(password)
    
def check_password(self, password):
    return self.passwrod.check_password_hash(self.password, password)


