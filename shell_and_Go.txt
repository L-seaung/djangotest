shell 自定义变量

什么是变量
1，变量来源于数学，是计算机语言中能存储计算结果或能表示值抽象的概念

2，自定义变量的规则
1），合法的字符串：字母，数字，下划线
2），字符数量：<=20
注意区分大小写

3，变量的声明
变量名 = 变量值 如：variable = 2
4，变量值的类型：自动分配， 数字， 字符串， 日期， 数组
5，变量的调用方式：$变量名   如：$variable
6,变量的作用范围：脚本的生存期内

单引号和双引号
在单引号中调用变量的结果是他会把变量的应用原样输出，想要打印变量的值用双引号就行啦

反引号的作用：输出命令的结果


shell中的环境变量
什么是环境变量？
在shell中用来存储有关shell会话和工作环境信息的变量

环境变量的查看：
可以用set或env命令来查看shell中的环境变量，但是set命令查看到的环境变量比env查看到的还要多，原因是set命令可以返回shell进程中所有定义的变量

shell环境变量的生存期

环境变量的加载， 首先它会加载:/etc/profile文件中的配置
                         /etc/bash.bashtc
			 /etc/profile.d/*sh
			 变量的加载其次是在家目录中加载隐藏文件
			 $HOME/.bash_profile
			 $HOME/.bash_login
			 $HOME/.profile
			 
环境变量的修改
PATH=$PATH:~/shellscript

7,shell
1，数学运算     exper expression
2,逻辑运算      
&，|，<,>,=,!=,<=,>=

3,
+
-
*
/
%
()
shell

在shell脚本中像 < 

expr $num1 \< $num2



result = $[$num < 19]
echo $result

在使用expr命令进行等于比较时变量要与符号之间要有空格，




字符串的连接 str1=hello str2=world str3=$str1$str2     str4=$str3 ' '"12345"  str5="this is a testing string:$str4"



expr index
例如：
    expr index "$str1" 'h'
    
字符串截取：expr substr $str pos  length --------->expr substr $str1 6 10
                           字符串截取的位置    




标准输入：
标准输出：
command > outputfile  

command >> outputfile





linux系统中将每个对象当作文件处理，

文件描述符是一个非负数，
每个过程一次最多可以有9

文件描述符         缩写         
    0           STDIN        
    1           STDOUT       
    2           ST
----------------------------华华丽的分割线---------------------------------------------------------------------------------​
A：go类型与变量

1，布尔型：bool
1），长度：1位
2），取值范围：true-false

2，整型：int/uint
1），根据平台可为32或64

3，8位整型：int8/uint8
1），长度：1字节
2），取值范围：-128--127/0--255

4，字节型：byte（uint8的别名）

5，16位整型：int16/uint16
1），长度：2字节
2），取值范围：-32768--32767/0--65535

6，32位整型：int32/uint32
1），长度：4字节
2），取值范围：-2^32/2-2^32/2-1/0-2^33-1

7，64位整型：int64/uint64
1），长度：8字节
2），取值范围：-2^64/2-2^64/2-1/0-2^65-1

8，浮点型：float32/float64
1），长度：4/8字节
2），小数位：精确到7/15小数位

9，复数型：complex64/complex128
1），长度：8/16字节

10，指针型：uintptr
1），足够保存指针的32/64位整型

11，其他类型
1），数组
2），结构
3），字符串

12，引用类型
1），切片（slice）
2），类哈希（map）
3），管道

13，接口型（interface）
   函数型（func）
   
B：类型的零值和别名

零值并不等价于空值（NULL）是指在变量生命为某种类型之后自动获得的默认值

1),int--->0
2),bool--->false
3),float--->0.0
4),string--->""(空字符串)
5),struct--->空结构
6),引用类型--->nil(空指针)

类型别名：
1），类型别名可以为某个类型赋予新的合法名称
2），类型别名并不是单纯的重命名或指向，而是用源类型作为底层类型，定义了一个全新的类型
3），新类型与源类型之间需要类型转换，属于相互兼容的类型
4），新类型可以拥有属于自己的一套方法
5），新类型不会继承源类型的方法，而需要进行内型转换后才可以调用

type Int string
     别名   源类型
     
C：变量的声明与赋值

1，单个变量的声明与赋值
1），声明格式：var <varibale_name> <variable_type>
          如：var a int
2），赋值格式：<variable_name> = <expression>
          如：a = 4

3），声明并赋值()
var <variable_name> [variable_type] = <expression>

example:
       var name string = "wengjiahao"
       


<variable_name>:=<expression>

example:
       age:=12
 
4)，使用下划线（_）抛弃赋值：_=<experssion>

当导入一个包，但不需要他的内容时，只需要调用它的初始化函数时候，

5），
1，可以使用var()
2，

var(                            var(
    a int = 1                         a = 1
    b string = "name"     or          b = "name"  
    c bool = true                     c = true
)                                  )


var <variable1>, <varialbe2>[variable_type] = <experssion1>, <experssion2>   (必须是相同类型的变量)

var name, sex string = "wengjiahao", "man"

<variable1>, <varialbe2> := <experssion1>, <experssion2>

name, age, sex := "nmaespace", 12, "m"


notes:
1》使用var()
2》声明全局变量时不可以使用:=的方式，
3》var 


D:
1）
2）
3）使用const
4）使用const()来定义常量组5
5）
6）

const a int = 1
const a = 1
const (
     text = "1234"
     number = 12
     len(text)
     num = a*20
)

const j, k, l = 10, 20, 30




1》在定义常量组时，如果不提供初始值，
2》
const(
    a = "A"
    b
)


iota
1》iota
2》iota的值是从0开始的，
3》每个常量组都会将iota的值重置为0，（不同常量组间iota）
4》通过常量的初始化规则和iota
const(
    a = iiota
    b
    c
)

const(
    a = iota
    b = iota       ------->结果为0,1,2
    c
)











