关系型数据库遵循ACID规则
1，A（atimicity）原子性：事务要么全部完成，要么全都不做
2，C（consistency）一致性:数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束
3，I (Isolation) 独立性:一个事务的执行不会影响另一个事务的执行
4，D (Durability) 持久性：事务提交后，他的所有操作都是永久性的

分布式系统
1，分布式系统是由多台计算机和通信的软件组件通过计算机网络连接组成
分布式系统具有高度的内聚性和透明性，
因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。
分布式系统可以应用在在不同的平台上如：Pc、工作站、局域网和广域网上等。



分布式计算的优点
可靠性（容错） ：
一台服务器的系统崩溃并不影响到其余的服务器。
可扩展性：
在分布式计算系统可以根据需要增加更多的机器。
资源共享：
共享数据是必不可少的应用，如银行，预订系统。
灵活性：
由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。
更快的速度：
分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。
开放系统：
由于它是开放的系统，本地或者远程都可以访问到该服务。
更高的性能：
相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。


分布式计算的缺点
故障排除： ：
故障排除和诊断问题。
软件： 
更少的软件支持是分布式计算系统的主要缺点。
网络：
网络基础设施的问题，包括：传输问题，高负载，信息丢失等。
安全性： 
开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。



1，启动mongodb数据库
mongod --dbpath data --logpath log/mongod.log --logappend --fork

2，创建数据库
use database_name

3，查看数据库
show dbs

4，切换数据库
use database_name

5，删除数据库
1，首先切换到要删除的数据库上
2，然后执行db.dropDatabase()命令来删除数据库

6，删除集合
db.collection_name.drop()

7，插入文档
db.COLLECTION_NAME.insert({"key1":"value",........})
也可以把文档赋给一个变量，在进行文档的插入操作
document = ({
    "key1":"value1",
    "key2":"value2",
    "key3":"value3"
})

db.col.insert(docment)

note:插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据

8，查看文档
db.COLUMN_NAME.find()

9,更新文档
update()方法进行队数据的更新
db.collection.update(
    <query>,
    <update>,
    {
        upsert:<boolean>,
        multi:<boolean>,
        writeConcer:document,
    }
)

query:查询条件，相当于sql后面的where条件
update:update的对象和一些更新的操作符（如$,$inc）,也可以理解sql update后面的set
upsert:可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
multi:可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
writeConcern:可选，抛出异常的级别。

db.col.update({"title":"mongodb"}, {$set:{"title":"mongodb tutorial"}})
=========更新多条数据========
db.col.update({"title":"mongodb"}, {$set:{"title":"mongodb tutorial"}}, false, true)

10,删除文档
db.col.remove(
    <query>,
    <justOne>,
)

query:删除文档的条件
justOne:（可选）如果设置为True或1，只是删除一个文档
writeConcern:可选，抛出异常的级别

example:
db.col.remove({"key":"values".....})
db.col_name.drop()//相当于删除表操作

11,查询文档
db.col.find()亦非结构化的形式来显示文档
db.col.find().pretty()以结构化的形式来显示文档

等于	      {<key>:<value>}	      db.col.find({"by":"菜鸟教程"}).pretty()	   where by = '菜鸟教程'
小于	      {<key>:{$lt:<value>}}	  db.col.find({"likes":{$lt:50}}).pretty()	  where likes < 50
小于或等于	{<key>:{$lte:<value>}}	db.col.find({"likes":{$lte:50}}).pretty()	where likes <= 50
大于	      {<key>:{$gt:<value>}}	  db.col.find({"likes":{$gt:50}}).pretty()	  where likes > 50
大于或等于	{<key>:{$gte:<value>}}	db.col.find({"likes":{$gte:50}}).pretty()	where likes >= 50
不等于	     {<key>:{$ne:<value>}}	 db.col.find({"likes":{$ne:50}}).pretty()	 where likes != 50

12,条件查询文档
$lt：小于
$gt：大于
$lte：小于等于
$gte：大于等于

db.col.find({"like":{$lt:100}}).pretty()
db.col.find({"like":{$gt:100}}).pretty()
db.col.find({"like":{$lte:100}}).pretty()
db.col.find({"like":{$gte:200}}).pretty()

13,limit 和 skip方法
db.col.find().limit(number)

db.col.find().pretty().limit(3)//限制返回三条数据

========skip跳过指定数量的数据========
db.col.find().limit(2).skip(2)

14,排序
mongodb提供了sort()方法对数据进行排序，值为1升序操作，-1为降序操作
db.col.find().sort({"like":1})
如果没有指定sort()方法，默认是升序排列

15,索引
mongodb使用ensureIndex()方法来创建索引
db.col.ensureIndex({key:1})
key为想要创建索引的字段，1为按升序操作创建索引，-1为按降序操作创建索引
mongodb使用getIndexse()来查看某个集合的索引
db.col_name.getIndex()

索引分类
_id索引，默认会自动创建
单键索引,最普通的索引；形如该数据如下：
{x:1, y:2, z:3},直接通过db.col_name.ensureIndex({x:1})就可以直接创建和使用
多键索引，


/***********************************mongo进阶*******************************************/

1，mongodb关系
mongodb的关系表示文档间在逻辑上的相互联系，文档间可以通过嵌入和引用来建立联系
它们的关系可以是如下：
一对一
一对多
多对一
多对多
