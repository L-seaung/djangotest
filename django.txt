安装django
1，sudo apt-get install django 这条命令是进行全局安装
2，去djangoproject.com下载源码包进行编译安装：
解压：tar -zxvf django-X.X.tar.gz
      cd 进去解压目录
      执行命令 sudo python setup.py install 进行编译安装
3，验证django是否安装成功
进入python的shell环境
import django
django.VERSION()

4，安装虚拟环境
sudo apt-get install virtualenv
下载源码包进行编译安装
解压：
    tar zxvf virtualenv-x.x.tar.gz
    cd 进去解压目录
    执行sudo python setup.py install 进行编译安装

5，创建一个工程
django-admin.py startproject project_name

6，创建一个网站
cd进去刚刚创建好的工程目录
django-admin.py startapp application_name

7，运行开发服务器
python manage.py runserver 0.0.0.0:8000

8，同步数据库和进行数据的迁移
python manage.py mikemigrations application_name
python manage.py migrate application_name

9,静态文件的设置
#settings.py 
STATICFLIES_DIRS = (
    os.path.join(BASE_DIRS, 'static'),
)
10，pyMySQL的使用
django默认导入的数据库驱动是MySQLdb，所以要使用pymsql先在工程目录下的__init__.py中导入它，如下：
import pymysql
pymysql.install_as_MySQLdb()

11,常用ORM操作
A，增加 create save：
Obj.objects.create('cloumn1',cloumn2,cloumn3,,,)
obj = objects()
obj.name = 'values1'
obj.age = 'values2'
obj.save()

B,修改 update
obj.objects.filter(id=id).update(name=name)

C,删除 delete(它是QuerySet 方法，而且是级联删除)
obj.objects.filter(id = id).delete(name = name)

12，查询常用API
a，get()方法返回的是一个models的对象；返回结果有且只有一个，如果符合筛选条件的对象超过一个，就会抛出MultipleobjectsRetured异常
如果没有找到符合条件的对象就会抛出DoesNoExist异常

b，distinct()剔除重复记录

c，exclude()查询条件不匹配的对象与filter()相反

d，filter()查询条件匹配的对象

e，exists()是否有数据存在，有就返回True，没有就返回False

f，count()返回数据库中匹配的查询（Queryset）的对象数量

g，values()

h，values_list()

j，first()

k，last()

13，多表联合查询

a，查询技巧：
__:两下划线可以生成连接查询，查询关联的字段信息
_set:提供了对象访问相关联表的数据的方法，但是这种方法只能是相关类访问定义了关系的类（主键类访问外键类）

b，例子：
author__name = 'name'
pub = publisher.objects.get(name='name')
pub.book_set.all()


14，
username
password
first_name
laste_name

from django.contrib.auth.models import User

class MyUser(models.Model):
    premission = models.IntegerField(label=u'权限', default=1)
    nigoname = models.OneToOneField(default=1)
    
    
#views.py
from yourapp.models import User

def account(request):
    if request.method == 'POST':
      email = request.get['email']
      username = request.get['username']
      password = request.get['password']
      user = User.objects.create_user(username=username, email=email, password=password)
      user.save()
      return HttpResponse "create user success!"
    return "failure!"
    


from django.contrib.auth import authenticate, User

def login(request):
    if request.method == 'post':
        username = request.get['username']
        password = request.get['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                return render('/index.html')
                

                              



