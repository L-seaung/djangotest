shell 自定义变量

什么是变量
1，变量来源于数学，是计算机语言中能存储计算结果或能表示值抽象的概念

2，自定义变量的规则
1），合法的字符串：字母，数字，下划线
2），字符数量：<=20
注意区分大小写

3，变量的声明
变量名 = 变量值 如：variable = 2
4，变量值的类型：自动分配， 数字， 字符串， 日期， 数组
5，变量的调用方式：$变量名   如：$variable
6,变量的作用范围：脚本的生存期内

单引号和双引号
在单引号中调用变量的结果是他会把变量的应用原样输出，想要打印变量的值用双引号就行啦

反引号的作用：输出命令的结果


shell中的环境变量
什么是环境变量？
在shell中用来存储有关shell会话和工作环境信息的变量

环境变量的查看：
可以用set或env命令来查看shell中的环境变量，但是set命令查看到的环境变量比env查看到的还要多，原因是set命令可以返回shell进程中所有定义的变量

shell环境变量的生存期

环境变量的加载， 首先它会加载:/etc/profile文件中的配置
                         /etc/bash.bashtc
			 /etc/profile.d/*sh
			 变量的加载其次是在家目录中加载隐藏文件
			 $HOME/.bash_profile
			 $HOME/.bash_login
			 $HOME/.profile
			 
环境变量的修改
PATH=$PATH:~/shellscript





-----------------------------------------------------------------------------------------------------------------
----------------------------华华丽的分割线-------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
About Go language programmming

A：变量类型

1：整型 int/uint
2：字符型 string
3：布尔型：bool
4：浮点型：float32/float64
5：引用类型：函数
6：指针型

变量与零值
int ---> 0
float ---> 0.0
string ---> " "(空字符串)
bool ---> false
nitr ---> NULL

变量的定义与赋值

单个变量的定义与赋值
var <variable_name> <varable_type> 如：var name string
name = "test_name"

var age int = 12

并行赋值
var <variable1>, <variable2> = <values>, <values>

变量组

var(
	variable1
	variable2
	variable3
	.......
)

类型推断

a, b, c, d = 1, "string", "hello", 564



常量的定义与iota
const(
	const_variale_list
	...
)

使用iota实现枚举
const(
	TODAY = iota
	TOMORRO
	YEARSDAY
)

流程控制
if语句块
package main

import (
	io "fmt"
)

func main(){
	var i int = 3
	if i <= 2 && i !=0{
		io.Println(i)
	}else{
		io.Println("done!")
	}
}

for 语句块





















